{"version":3,"sources":["context/dateContex.js","components/WeekNavigation/weekNavigation.js","containers/TasksNavigation/TasksNavigation.js","App.js","reportWebVitals.js","index.js","components/WeekNavigation/weekNavigation.module.scss"],"names":["dayjs","extend","isoWeek","isoWeeksInYear","isLeapYear","DateContex","createContext","DateProvider","props","useState","date","setDate","Provider","value","children","weekNavigation","className","classes","icon","onClick","changeView","weekNumber","dayOfWeek","weekPeriod","WEEK_DAYS","TasksNavigation","useContext","Fragment","id","currentWeek","currentYear","year","numberOfWeeks","currentDay","monthLength","daysInMonth","currentMonth","month","prevMonthLength","dayNumber","isoWeekday","weekStart","startOf","format","weekEnd","endOf","library","add","faAngleDoubleRight","faAngleDoubleLeft","faAngleLeft","faAngleRight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ad9ae52b.chunk.js","sourcesContent":["import React, {useState, createContext} from 'react';\r\nimport dayjs from 'dayjs';\r\nimport isoWeek from 'dayjs/plugin/isoWeek';\r\nimport isoWeeksInYear from 'dayjs/plugin/isoWeeksInYear';\r\nimport isLeapYear from 'dayjs/plugin/isLeapYear';\r\n\r\ndayjs.extend(isoWeek);\r\ndayjs.extend(isoWeeksInYear);\r\ndayjs.extend(isLeapYear);\r\n\r\nexport const DateContex = createContext();\r\n\r\nexport const DateProvider = (props) => {\r\n    const [date, setDate] = useState(dayjs());\r\n\r\n    return (\r\n    <DateContex.Provider value = {[date , setDate]}>\r\n        {props.children}\r\n    </DateContex.Provider>\r\n    )\r\n}","import React from 'react';\r\nimport * as classes from './weekNavigation.module.scss';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n\r\nconst weekNavigation = (props) => {\r\n    return (\r\n        <nav className={classes.weekNav}>\r\n            <FontAwesomeIcon icon='angle-double-left' onClick={() => props.changeView('prevWeek')}/>\r\n            <FontAwesomeIcon icon='angle-left' className={classes.dayData} onClick={() => props.changeView('prevDay')}/>\r\n            <hgroup>\r\n                <h2>Week {props.weekNumber}</h2>\r\n                <h3 className={classes.dayData}>{props.dayOfWeek}</h3>\r\n                <h3 className={classes.weekData}>{props.weekPeriod}</h3>\r\n            </hgroup>\r\n            <FontAwesomeIcon icon='angle-right' className={classes.dayData} onClick={() => props.changeView('nextDay')}/>\r\n            <FontAwesomeIcon icon='angle-double-right' onClick={() => props.changeView('nextWeek')}/>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default weekNavigation","import React, {useContext} from 'react';\r\nimport dayjs from 'dayjs';\r\nimport {DateContex} from '../../context/dateContex';\r\nimport WeekNavigation from '../../components/WeekNavigation/weekNavigation';\r\n\r\nconst WEEK_DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n\r\nconst TasksNavigation = () => {\r\n\r\n    const [date, setDate] = useContext(DateContex)\r\n\r\n    const changeView = id => {\r\n\r\n        if ( id === 'prevWeek' || id === 'nextWeek') {\r\n            const currentWeek = date.isoWeek();\r\n            const currentYear = date.year();\r\n\r\n            if (currentWeek === 1 && id === 'prevWeek') {\r\n                const numberOfWeeks = dayjs(date).year(currentYear - 1).isoWeeksInYear();\r\n                setDate(dayjs(date).year(currentYear - 1).isoWeek(numberOfWeeks));\r\n            } \r\n            else if (currentWeek === dayjs(date).isoWeeksInYear() && id === 'nextWeek') {\r\n                setDate(dayjs(date).year(currentYear + 1).isoWeek(1));\r\n            }\r\n            else {\r\n                id === 'prevWeek' ? setDate(dayjs(date).isoWeek(currentWeek - 1)) : setDate(dayjs(date).isoWeek(currentWeek + 1))\r\n            }\r\n\r\n        } else {\r\n            const currentDay = date.date();\r\n            const monthLength = date.daysInMonth();\r\n            const currentMonth = date.month()\r\n\r\n            if (currentDay === 1 && id === 'prevDay') {\r\n                const prevMonthLength = dayjs(date).month(-1).daysInMonth()\r\n                setDate(dayjs(date).month(currentMonth - 1).date(prevMonthLength));\r\n            }\r\n            else if (currentDay === monthLength && id === 'nextDay') {\r\n                setDate(dayjs(date).month(currentMonth + 1).date(1));\r\n            } \r\n            else {\r\n                id === 'prevDay' ? setDate(dayjs(date).date(currentDay - 1)) : setDate(dayjs(date).date(currentDay + 1))\r\n            }\r\n        }\r\n    }\r\n\r\n    const dayOfWeek = () => {\r\n        const dayNumber = date.isoWeekday();\r\n        return WEEK_DAYS[dayNumber - 1]\r\n    }\r\n\r\n    const weekPeriod = () => {\r\n        let weekStart = dayjs(date).startOf('isoWeek').format('DD.MM.YYYY');\r\n        let weekEnd = dayjs(date).endOf('isoWeek').format('DD.MM.YYYY');\r\n\r\n        return `${weekStart} - ${weekEnd}`\r\n    }\r\n\r\n    const weekNumber = () => {\r\n            return `${dayjs(date).isoWeek()}`\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <WeekNavigation \r\n                changeView = {changeView}\r\n                dayOfWeek = {dayOfWeek()}\r\n                weekPeriod = {weekPeriod()}\r\n                weekNumber = {weekNumber()}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TasksNavigation","import {DateProvider} from './context/dateContex';\r\nimport TasksNavigation from './containers/TasksNavigation/TasksNavigation';\r\n\r\n//fontAwesome\r\nimport {library} from '@fortawesome/fontawesome-svg-core';\r\nimport {faAngleDoubleRight, faAngleDoubleLeft, faAngleLeft, faAngleRight} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faAngleDoubleRight, faAngleDoubleLeft, faAngleLeft, faAngleRight)\r\n\r\nfunction App() {\r\n  return (\r\n    <DateProvider>\r\n      <TasksNavigation />\r\n    </DateProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weekNav\":\"weekNavigation_weekNav__2P_qE\",\"dayData\":\"weekNavigation_dayData__1UOJI\",\"weekData\":\"weekNavigation_weekData__1sB0d\"};"],"sourceRoot":""}